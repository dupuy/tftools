#!/bin/bash
#
# Make a Terraform plan
#
# The plan filename includes the tenant (directory) and timestamp when
# `terraform plan` was run:
#
#    test1/20150501123456.plan
#
# is a plan that was created for the 'test1' tenant on May 1 at 12:34:56
#
# If the -destroy option is given to plan for `terraform destroy` the plan
# filename would look like:
#
#    test1/20150501123456-destroy.plan
#
# In addition to the .plan file, a .log file captures the output from
# `terraform plan` and a .targets file captures any -target options
# given at the time terraform plan was run.

usage() {
    test -n "$1" && echo "$0: $*" >&2
    echo "Usage: plan [-destroy] [-target=RESOURCE]... DEPLOYMENT[.tfvars]" >&2
    BRANCH=$(gitbranch)
    echo " (if DEPLOYMENT is omitted, defaults to current branch '$BRANCH')" >&2
    exit 1
}

gitbranch() {
    git describe --all --exact-match 2>/dev/null | sed 's=.*/=='
}

ARGS=
TARGETS=
DEPLOYMENT=
while [ "" != "$1" ]
do
    case "$1" in
        -destroy) ARGS=-destroy; shift ;;
        -target=*) TARGETS="$TARGETS $1"; shift ;;
        -*) usage bad option "'$1'";;
	*.[^t]*|*.*[^fvars]) usage deployment "'$1'" is not a .tfvars file;;
        *)
            if [ "" = "$DEPLOYMENT" ]; then
                DEPLOYMENT=$1
                shift
            else
                usage
            fi ;;
    esac
done
if [ "" = "$DEPLOYMENT" ]; then
    DEPLOYMENT=$(gitbranch)
    if [ "" = "$DEPLOYMENT" -o ! -f "$DEPLOYMENT".tfvars ]; then
	usage
    fi
fi

DEPLOYMENT=${DEPLOYMENT%.tfvars}
BASE=$DEPLOYMENT/$(date +%Y%m%d-%H%M%S)$ARGS

if [ ! -f "$DEPLOYMENT.tfvars" ]; then
    usage there is no "$DEPLOYMENT.tfvars" file
fi

trap "rm -f '$BASE'.{plan,targets,log}; rmdir '$DEPLOYMENT' 2>/dev/null" 0

# Git staging check
if git status --porcelain *.tf 2>/dev/null | egrep -q '^([U?]|.[DMU])'; then
    echo 'unstaged .tf files; use `git add *.tf` or `git stash -u` first'
    exit 1
fi

# Pre-commit pre-check
if [ -f .git/hooks/pre-commit ]; then
    SKIP=$(sed -n 's/^ *- *id: *//p' .pre-commit-config.yaml)
    export SKIP=$(echo "$SKIP" | egrep -v 'private|conflict' | tr '\n' ',')
     { pre-commit run 2>&1 || exit 1; } | grep -v Skipped
fi

TENV=
if [ -f "$DEPLOYMENT.tfenv" ]; then
    TENV=$DEPLOYMENT.tfenv
fi
setenv() {
    env -i HOME=$HOME PATH=$PATH PWD=$PWD SHELL=$SHELL TERM=$TERM USER=$USER \
           OS_USERNAME=$OS_USERNAME OS_PASSWORD=$OS_PASSWORD                 \
        sh -c "for E in *.env $TENV; do source \$E; done; exec $*" || exit $?
}

setenv terraform get -update

mkdir -p "$DEPLOYMENT" || exit 1
for T in $TARGETS
do
    echo -- $T
done > "$BASE.targets"

setenv terraform plan $ARGS -module-depth=-1 -var-file "$DEPLOYMENT.tfvars" \
                      -refresh=true -state="$DEPLOYMENT/terraform.tfstate"  \
                      -out "$BASE.plan" -detailed-exitcode |
    tee "$BASE.log"

ERR=${PIPESTATUS[0]}

# exit code 2 == "succeeded with non-empty diff (changes present)"
if [ "2" = "$ERR" ]; then
    for OUT in "$BASE".{plan,targets,log}
    do
        if [ ! -s "$OUT" ]; then
            rm -f "$OUT"
        fi
    done
    case "${BASE}" in
	*-destroy*)
	    rm -f "$DEPLOYMENT/latest.plan"
	    ln -sf "${BASE#**/}.plan" "$DEPLOYMENT/destroy.plan"
	    ;;
	*)
	    rm -f "$DEPLOYMENT/destroy.plan"
	    ln -sf "${BASE#**/}.plan" "$DEPLOYMENT/latest.plan"
	    ;;
    esac

    trap "rmdir '$DEPLOYMENT' 2>/dev/null" 0

elif [ "0" = "$ERR" ]; then
    for OUT in "$BASE".{plan,targets,log}
    do
        if [ ! -s "$OUT" ]; then
            rm -f "$OUT"
        fi
    done

    rm -f "$DEPLOYMENT/latest.plan" "$DEPLOYMENT/destroy.plan"

    trap "rmdir '$DEPLOYMENT' 2>/dev/null" 0
fi

exit $ERR
