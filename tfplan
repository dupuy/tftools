#!/bin/bash
#
# Make a Terraform plan
#
# The plan filename includes the tenant (directory) and timestamp when
# `terraform plan` was run:
#
#    test1/20150501123456.plan
#
# is a plan that was created for the 'test1' tenant on May 1 at 12:34:56
#
# If the -destroy option is given to plan for `terraform destroy` the plan
# filename would look like:
#
#    test1/20150501123456-destroy.plan
#
# In addition to the .plan file, a .log file captures the output from
# `terraform plan` and a .targets file captures any -target options
# given at the time terraform plan was run.

usage() {
    test -n "$1" && echo "$0: $*" >&2
    echo "Usage: tfplan [-destroy] [-target=RESOURCE]... DEPLOY[.tfvars]" >&2
    BRANCH=$(gitbranch)
    echo " (if DEPLOY is omitted, defaults to current branch '$BRANCH')" >&2
    exit 1
}

gitbranch() {
    BRANCH=$(git branch --no-color | sed -n '/\* /s///p')
    case $BRANCH in
        '(detached from '*/*) : ;;
        '(detached from '*)
            BRANCH=$(git describe --all --exact-match 2>/dev/null)
            ;;
    esac
    BRANCH=${BRANCH##*/}
    echo "$BRANCH"
}

REMOTE=$(./getremote.py 2>/dev/null)
case $? in
    0) ISREMOTE=true ;;
    2) ISREMOTE=false ;;
    *) exec ./getremote.py ;;
esac

ARGS=
TARGETS=
DEPLOYMENT=
while [ "" != "$1" ]
do
    case "$1" in
        -destroy) ARGS="$ARGS $1"; shift ;;
        -refresh=true) REFRESH="$1"; shift ;;
        -refresh=false) REFRESH="$1"; shift ;;
        -target=*) TARGETS="$TARGETS $1"; shift ;;
        # attempt to accomodate users used to --options
        --*=*)
            OPT=${1#-}
            echo >&2 "[ATTENTION! fix '${1%%=*}' to terraform '${OPT%%=*}']"
            shift
            set -- "$OPT" "$@"
            ;;
        --*) usage bad option "'$1'" - use "'${1#-}'" or "'${1#-}=...'" ;;
        -target|-refresh) usage bad option "'$1'" - use "'$1=...'" ;;
        -*) usage bad option "'$1'" ;;
        *.[^t]*|*.*[^fvars]) usage deployment "'$1'" is not a .tfvars file ;;
        *)
            if [ "" = "$DEPLOYMENT" ]; then
                DEPLOYMENT=$1
                shift
            else
                usage
            fi ;;
    esac
done
if [ "" = "$DEPLOYMENT" ]; then
    DEPLOYMENT=$(gitbranch)
    if [ "" = "$DEPLOYMENT" -o ! -f "$DEPLOYMENT".tfvars ]; then
        usage
    fi
fi

DEPLOYMENT=${DEPLOYMENT%.tfvars}
BASE=$DEPLOYMENT/$(date +%Y%m%d-%H%M%S)${ARGS# }

if [ ! -f "$DEPLOYMENT.tfvars" ]; then
    usage there is no "$DEPLOYMENT.tfvars" file
fi

if $ISREMOTE && [ "${REMOTE#*/}" != "$DEPLOYMENT" ]; then
    echo "Configured to use different remote '$REMOTE' - use tfremote disable"
    echo " (and then tfremote config '$DEPLOYMENT')"
    exit 1
fi

trap "rm -f '$BASE'.{plan,targets,log}; rmdir '$DEPLOYMENT' 2>/dev/null" 0

# Git staging check
if git status --porcelain 2>/dev/null | egrep '^([U?]|.[DMU]).*\.tf$'; then
    echo 'unstaged .tf files; use `git add *.tf` or `git stash -u` first'
    exit 1
fi

# Pre-commit pre-check
if [ -f .git/hooks/pre-commit ]; then
    SKIP=$(sed -n 's/^ *- *id: *//p' .pre-commit-config.yaml)
    export SKIP=$(echo "$SKIP" | egrep -v 'private|conflict' | tr '\n' ',')
     { pre-commit run 2>&1 || exit 1; } | grep -v Skipped
fi

if [ -f Makefile ] && UD="`egrep 'filename\s*=\s*\"[^\"]*\.userdata\"' *.tf`"
then
    STAMP=$(date +%Y%m%d%H%M%S)
    UDS=$(echo "$UD" | sed -n 's/.*"\([^"]*\.userdata\)".*/\1/p' | sort -u)
    for UDF in $UDS
    do
        if [ -f "$UDF" ]; then cp -p "$UDF" "$UDF"."$STAMP"; fi
    done
    make $UDS
    for UDF in $UDS
    do
        if [ -f "$UDF"."$STAMP" ]; then
            diff -q "$UDF" "$UDF"."$STAMP" && rm -f "$UDF"."$STAMP"
        fi
    done
fi

TENV=
if [ -f "$DEPLOYMENT.tfenv" ]; then
    TENV=$DEPLOYMENT.tfenv
fi
setenv() {
    env -i HOME=$HOME PATH=$PATH PWD=$PWD SHELL=$SHELL TERM=$TERM USER=$USER \
           OS_USERNAME=$OS_USERNAME OS_PASSWORD=$OS_PASSWORD                 \
           ${TF_LOG+TF_LOG=$TF_LOG} ${TF_LOG_PATH+TF_LOG_PATH=$TF_LOG_PATH}  \
        sh -c "eval '$(sed 's/^/export /' *.env $TENV)'; $*" || exit $?
}

# default get + refresh on a 'best-effort' basis
RUNGET=setenv
RUNREFRESH=:
DONTFAIL='|| true'
STATE=$DEPLOYMENT/terraform.tfstate
case $REFRESH in
    *-refresh=false) RUNGET=: ;;
    *-refresh=true) DONTFAIL= ;;
    *)
        if test -e "$STATE" || $ISREMOTE; then
            RUNREFRESH=setenv
        fi
        REFRESH=-refresh=false
        ;;
esac
# (maybe) get modules and refresh state
$RUNGET terraform get -update $DONTFAIL
$RUNREFRESH terraform refresh -var-file "$DEPLOYMENT.tfvars" \
              -state="$STATE" $TARGETS $DONTFAIL

mkdir -p "$DEPLOYMENT" || exit 1
for T in $TARGETS
do
    printf '%s\n' "$T"
done > "$BASE.targets"

setenv terraform plan $ARGS -module-depth=-1 -var-file "$DEPLOYMENT.tfvars" \
                      -state="$STATE"                                       \
                      -out "$BASE.plan" -detailed-exitcode $REFRESH |
    tee "$BASE.log"

ERR=${PIPESTATUS[0]}

# exit code 2 == "succeeded with non-empty diff (changes present)"
if [ "2" = "$ERR" ]; then
    for OUT in "$BASE".{plan,targets,log}
    do
        if [ ! -s "$OUT" ]; then
            rm -f "$OUT"
        fi
    done
    case "${BASE}" in
        *-destroy*)
            rm -f "$DEPLOYMENT/latest.plan"
            ln -sf "${BASE#*/}.plan" "$DEPLOYMENT/destroy.plan"
            ;;
        *)
            rm -f "$DEPLOYMENT/destroy.plan"
            ln -sf "${BASE#*/}.plan" "$DEPLOYMENT/latest.plan"
            ;;
    esac

    trap "rmdir '$DEPLOYMENT' 2>/dev/null" 0

elif [ "0" = "$ERR" ]; then
    for OUT in "$BASE".{plan,targets,log}
    do
        if [ ! -s "$OUT" ]; then
            rm -f "$OUT"
        fi
    done

    rm -f "$DEPLOYMENT/latest.plan" "$DEPLOYMENT/destroy.plan"

    trap "rmdir '$DEPLOYMENT' 2>/dev/null" 0
fi

exit $ERR
