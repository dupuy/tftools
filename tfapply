#!/bin/bash
#
# Apply a previously created Terraform plan
#
# The plan filename includes the tenant (directory) and timestamp when
# `terraform plan` was run, e.g.:
#
#    test1/20150501123456.plan
#
# is a plan that was created for the 'test1' tenant on May 1 at 12:34:56
#
# In addition to the .plan file, a .tfout file captures the output from
# `terraform plan` and a .targets file captures any -target options
# given at the time terraform plan was run.

usage() {
    test -n "$1" && echo "$0: $*" >&2
    echo "Usage: tfapply PLAN[.plan]" >&2
    BRANCH=$(gitbranch)
    echo " (if PLAN is omitted, defaults to current branch '$BRANCH')" >&2
    exit 1
}

gitbranch() {
    git describe --all --exact-match 2>/dev/null | sed 's=.*/=='
}

TARGETS=
case $1 in
    -*) usage ;;
    *.[^p]*|*.*[^lan]) usage plan "'$1'" is not a .plan file;;
    '')
        PLAN=$(gitbranch)
        if [ "" = "$PLAN" -o ! -d "$PLAN" ]; then
            usage
        fi
        PLAN=$PLAN/latest.plan
        ;;
    *) PLAN=$1; shift ;;
esac
if [ "0" -lt "$#" ]; then
    usage
fi

source *.env

case $PLAN in
    *.plan) : ;;
    *)  if [ ! -f "$PLAN" -a ! -f "$PLAN.plan" -a -L "$PLAN/latest.plan" ]; then
            PLAN=$PLAN/latest.plan
        fi ;;
esac
if [ -L "$PLAN" ]; then
    PLANFILE=${PLAN%/*}/`readlink "$PLAN"`
elif [ -f "$PLAN" ]; then
    PLANFILE=$PLAN
else
    usage there is no "$PLAN" file
fi
BASE=${PLAN%.plan}

DEPLOYMENT=${PLAN%%/*}
TARGETS=$(cat "$BASE.targets" 2>/dev/null)


# Git commit check
if git status --porcelain *.tf 2>/dev/null | egrep -q '^([^ ]|.[^ ])'; then
    echo 'uncommitted .tf files; use `git commit` or `git stash -u` first'
    exit 1
fi

TENV=
if [ -f "$DEPLOYMENT.tfenv" ]; then
    TENV=$DEPLOYMENT.tfenv
fi
setenv() {
    env -i HOME=$HOME PATH=$PATH PWD=$PWD SHELL=$SHELL TERM=$TERM USER=$USER \
           OS_USERNAME=$OS_USERNAME OS_PASSWORD=$OS_PASSWORD                 \
           ${TF_LOG+TF_LOG=$TF_LOG} ${TF_LOG_PATH+TF_LOG_PATH=$TF_LOG_PATH}  \
        sh -c "for E in *.env $TENV; do source \$E; done; exec $*" || exit $?
}

setenv terraform apply -state=$DEPLOYMENT/terraform.tfstate $TARGETS $PLANFILE |
    tee -a "$BASE.log"

ERR=${PIPESTATUS[0]}

cat "$BASE".log >> "$DEPLOYMENT"/terraform.log
rm -f "$BASE".{targets,log}
if [ "0" = "$ERR" ]; then
    trap "rmdir '$DEPLOYMENT' 2>/dev/null" 0
else
    mv "$PLANFILE" "$BASE".failed
fi
rm -f "$PLAN" "$PLANFILE"

exit $ERR
